{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Django Tenants URL \u00b6 Official Documentation - https://tarsil.github.io/django-tenants-url/ Table of Contents \u00b6 Django Tenants URL Table of Contents About Django Tenants URL Dependencies Motivation Installation After installing django-tenants Install django-tenants-url Django Tenants URL Settings X_REQUEST_ID Example Documentation and Support License About Django Tenants URL \u00b6 Django Tenants URL is a wrapper on the top of the django-tenants package that serves a different yet common use case, the multi-tenant implementation via HEADER and not using sub domains . A special thanks to the team behind Django Tenants . Dependencies \u00b6 The project contains views , permissions , models and more addons that can be used across projects. django-tenants-url is built on the top of the following dependencies: Django Django Rest Framework Django Tenants Motivation \u00b6 When implementing multi tenancy architecture there are many factors to consider and cover and those were greatly approached by django-tenants but so summarize, there are 3 common ways: Shared schemas - The data of all users are shared within the same schema and filtered by common IDs or whatever that is unique to the platform. This is not so great for GDPR. Shared database, different Schemas - The user's data is split by different schemas but live on the same database. Different databases - The user's data or any data live on different databases. As mentioned before, django-tenants-url is a wrapper on the top of django-tenants and therefore we will be approaching the second. Many companies have limited resources (money, people...) and limited choices from those constraints. When implementing multi tenancy, the default would be to use subdomains in order to access the desired schema. E.g.: www.mycompany.saascompany.com My Company is the tenant of the saascompany.com that is publicaly available to the users. When the mycompany is sent to the backend, the middleware splits the subdomain and the TLD (top-level domain) and maps the tenant with the schema associated. For this work, one of the ways is to change your apache , nginx or any other configurations that accepts and forwards calls to the *.sasscompany.com and performs the above action. If the frontend and backend are split, extra configurations need also to be made on that front and all of this can be a pain. What does django-tenants-url solve? The principle of mapping users to the schemas remains the same but the way of doing it is what diverges from the rest. What if we were able to only use www.sasscompany.com , login as usual and automatically the platform knows exactly to which schema the user needs to be mapped and forward? This is what django-tenants-url solves. A single url that does the multi tenancy without breaking the principle and architecture and simply using one single url Installation \u00b6 Prior to install the django-tenants-url , django-tenants needs to be installed as well. Please follow the installation steps from Django Tenants After installing django-tenants \u00b6 Install django-tenants-url \u00b6 pip install django-tenants-url The TENANT_MODEL and TENANT_DOMAIN_MODEL from django-tenants need to be also in the settings.py . Add django-tenants-url to INSTALLED_APPS . INSTALLED_APPS = [ ... 'django_tenants' , 'django_tenants_url' , ... ] django-tenants-url offers a special wrapper over the mixins of django-tenants with the same names so you don't need to worry about breaking changes and the additional unique TenantUserMixin that maps the users with a tenant. Create the models. # myapp.models.py from django.db import models from django_tenants_url.models import TenantMixin , DomainMixin , TenantUserMixin class Client ( TenantMixin ): \"\"\" This table provides the `tenant_uuid` needed to be used in the `X_REQUEST_HEADER` and consumed by the RequestUUIDTenantMiddleware. \"\"\" pass class Domain ( DomainMixin ): pass class TenantUser ( TenantUserMixin ): pass Add the DTU_TENANT_USER_MODEL to settings.py . # settings.py ... DTU_TENANT_USER_MODEL = 'myapp.TenantUser' ... Update the MIDDLEWARE to have the new RequestUUIDTenantMiddleware . Preferentially at the very top. # settings.py ... MIDDLEWARE = [ 'django_tenants_url.middleware.RequestUUIDTenantMiddleware' , 'django.middleware.security.SecurityMiddleware' , ... ] ... Generate the migrations. python manage.py makemigrations Run the migrations as if it was django-tenants and not the classic migrate . python manage.py migrate_schemas The UUID needed for the RequestUUIDTenantMiddleware can be found in your table inherited from the TenantMixin . None: Do not run python manage.py migrate or else it will sync everything into the public. And that is it. The RequestUUIDTenantMiddleware should be able to map the TenantUser created with a tenant and route the queries to the associated schema. Checkout the documentation and understand how to integrate with your views and taking advantage of the utils for your TenantUser (or your implementation), Django Tenants URL Settings \u00b6 # default settings DTU_TENANT_NAME = \"Public\" DTU_TENANT_SCHEMA = \"public\" DTU_DOMAIN_NAME = \"localhost\" DTU_PAID_UNTIL = \"2100-12-31\" DTU_ON_TRIAL = False DTU_HEADER_NAME = \"HTTP_X_REQUEST_ID\" DTU_AUTO_CREATE_SCHEMA = True DTU_AUTO_DROP_SCHEMA = False DTU_TENANT_USER_MODEL = None X_REQUEST_ID \u00b6 By default django-tenants-url has the header name HTTP_X_REQUEST_ID that will be lookup from the middleware when sent via HTTP. This name can be overriten by the special setting DTU_HEADER_NAME . Example \u00b6 A Django Like app implementing Django Tenants Url can be found here . The example can be found here Documentation and Support \u00b6 Full documentation for the project is available at https://tarsil.github.io/django-tenants-url/ License \u00b6 Copyright (c) 2022-present Tiago Silva and contributors under the MIT license .","title":"Installation"},{"location":"#django-tenants-url","text":"Official Documentation - https://tarsil.github.io/django-tenants-url/","title":"Django Tenants URL"},{"location":"#table-of-contents","text":"Django Tenants URL Table of Contents About Django Tenants URL Dependencies Motivation Installation After installing django-tenants Install django-tenants-url Django Tenants URL Settings X_REQUEST_ID Example Documentation and Support License","title":"Table of Contents"},{"location":"#about-django-tenants-url","text":"Django Tenants URL is a wrapper on the top of the django-tenants package that serves a different yet common use case, the multi-tenant implementation via HEADER and not using sub domains . A special thanks to the team behind Django Tenants .","title":"About Django Tenants URL"},{"location":"#dependencies","text":"The project contains views , permissions , models and more addons that can be used across projects. django-tenants-url is built on the top of the following dependencies: Django Django Rest Framework Django Tenants","title":"Dependencies"},{"location":"#motivation","text":"When implementing multi tenancy architecture there are many factors to consider and cover and those were greatly approached by django-tenants but so summarize, there are 3 common ways: Shared schemas - The data of all users are shared within the same schema and filtered by common IDs or whatever that is unique to the platform. This is not so great for GDPR. Shared database, different Schemas - The user's data is split by different schemas but live on the same database. Different databases - The user's data or any data live on different databases. As mentioned before, django-tenants-url is a wrapper on the top of django-tenants and therefore we will be approaching the second. Many companies have limited resources (money, people...) and limited choices from those constraints. When implementing multi tenancy, the default would be to use subdomains in order to access the desired schema. E.g.: www.mycompany.saascompany.com My Company is the tenant of the saascompany.com that is publicaly available to the users. When the mycompany is sent to the backend, the middleware splits the subdomain and the TLD (top-level domain) and maps the tenant with the schema associated. For this work, one of the ways is to change your apache , nginx or any other configurations that accepts and forwards calls to the *.sasscompany.com and performs the above action. If the frontend and backend are split, extra configurations need also to be made on that front and all of this can be a pain. What does django-tenants-url solve? The principle of mapping users to the schemas remains the same but the way of doing it is what diverges from the rest. What if we were able to only use www.sasscompany.com , login as usual and automatically the platform knows exactly to which schema the user needs to be mapped and forward? This is what django-tenants-url solves. A single url that does the multi tenancy without breaking the principle and architecture and simply using one single url","title":"Motivation"},{"location":"#installation","text":"Prior to install the django-tenants-url , django-tenants needs to be installed as well. Please follow the installation steps from Django Tenants","title":"Installation"},{"location":"#after-installing-django-tenants","text":"","title":"After installing django-tenants"},{"location":"#install-django-tenants-url","text":"pip install django-tenants-url The TENANT_MODEL and TENANT_DOMAIN_MODEL from django-tenants need to be also in the settings.py . Add django-tenants-url to INSTALLED_APPS . INSTALLED_APPS = [ ... 'django_tenants' , 'django_tenants_url' , ... ] django-tenants-url offers a special wrapper over the mixins of django-tenants with the same names so you don't need to worry about breaking changes and the additional unique TenantUserMixin that maps the users with a tenant. Create the models. # myapp.models.py from django.db import models from django_tenants_url.models import TenantMixin , DomainMixin , TenantUserMixin class Client ( TenantMixin ): \"\"\" This table provides the `tenant_uuid` needed to be used in the `X_REQUEST_HEADER` and consumed by the RequestUUIDTenantMiddleware. \"\"\" pass class Domain ( DomainMixin ): pass class TenantUser ( TenantUserMixin ): pass Add the DTU_TENANT_USER_MODEL to settings.py . # settings.py ... DTU_TENANT_USER_MODEL = 'myapp.TenantUser' ... Update the MIDDLEWARE to have the new RequestUUIDTenantMiddleware . Preferentially at the very top. # settings.py ... MIDDLEWARE = [ 'django_tenants_url.middleware.RequestUUIDTenantMiddleware' , 'django.middleware.security.SecurityMiddleware' , ... ] ... Generate the migrations. python manage.py makemigrations Run the migrations as if it was django-tenants and not the classic migrate . python manage.py migrate_schemas The UUID needed for the RequestUUIDTenantMiddleware can be found in your table inherited from the TenantMixin . None: Do not run python manage.py migrate or else it will sync everything into the public. And that is it. The RequestUUIDTenantMiddleware should be able to map the TenantUser created with a tenant and route the queries to the associated schema. Checkout the documentation and understand how to integrate with your views and taking advantage of the utils for your TenantUser (or your implementation),","title":"Install django-tenants-url"},{"location":"#django-tenants-url-settings","text":"# default settings DTU_TENANT_NAME = \"Public\" DTU_TENANT_SCHEMA = \"public\" DTU_DOMAIN_NAME = \"localhost\" DTU_PAID_UNTIL = \"2100-12-31\" DTU_ON_TRIAL = False DTU_HEADER_NAME = \"HTTP_X_REQUEST_ID\" DTU_AUTO_CREATE_SCHEMA = True DTU_AUTO_DROP_SCHEMA = False DTU_TENANT_USER_MODEL = None","title":"Django Tenants URL Settings"},{"location":"#x_request_id","text":"By default django-tenants-url has the header name HTTP_X_REQUEST_ID that will be lookup from the middleware when sent via HTTP. This name can be overriten by the special setting DTU_HEADER_NAME .","title":"X_REQUEST_ID"},{"location":"#example","text":"A Django Like app implementing Django Tenants Url can be found here . The example can be found here","title":"Example"},{"location":"#documentation-and-support","text":"Full documentation for the project is available at https://tarsil.github.io/django-tenants-url/","title":"Documentation and Support"},{"location":"#license","text":"Copyright (c) 2022-present Tiago Silva and contributors under the MIT license .","title":"License"},{"location":"example/","text":"Example \u00b6 Here follows an example in how to use django-tenants-url . Table of Contents \u00b6 Example Table of Contents Initial Notes Install package Settings Create Tenant django app Create and run migrations Update settings Start the server Get a Tenant UUID Use the UUID within the headers Initial Notes \u00b6 This is a very basic example how to see the UUID of a tenant and use it in the headers. For more robust and secure approach we also provide views , serializers , utils and some permissions and handlers that can be used accordingly. Install package \u00b6 pip install django-tenants-url Settings \u00b6 After installing django-tenants-url , add it into the settings. INSTALLED_APPS = [ ... 'django_tenants' , 'django_tenants_url' , ... ] Create Tenant django app \u00b6 Let's create a tenant custom app and add it into the settings. Create the app django-admin startapp tenant Add the app to the INSTALLED_APPS . python INSTALLED_APPS = [ ... 'django_tenants', 'django_tenants_url', 'tenant', ... ] More settings will be needed but we will back later on to update the settings. Create the models \u00b6 Inside the newly created tenant in the models.py . from django_tenants_url.models import TenantMixin , DomainMixin , TenantUserMixin class Client ( TenantMixin ): pass class Domain ( DomainMixin ): pass class TenantUser ( TenantUserMixin ): pass Create and run migrations \u00b6 Create migrations. python manage.py makemigrations Run migrations. python manage.py migrate_schemas Update settings \u00b6 With the models created we can now update the settings.py . Add extra needed settings. INSTALLED_APPS = [ ... ] TENANT_MODEL = 'tenant.Client' # needed from django-tenants TENANT_DOMAIN_MODEL = 'tenant.Domain' # needed from django-tenants # DTU_TENANT_USER_MODEL DTU_TENANT_USER_MODEL = 'tenant.TenantUser' # unique to django-tenants-url Update the MIDDLEWARE . MIDDLEWARE = [ 'django_tenants_url.middleware.RequestUUIDTenantMiddleware' , 'django.middleware.security.SecurityMiddleware' , ... ] Start the server \u00b6 Once the first request hits the server, it should create the public tenant and public domain. Get a Tenant UUID \u00b6 django-tenants-url provides out-of-the-box views to help you with all of the process as well as some functions that can be used to get some of the information like the UUID needed to be used in the header of a request and map to user schema. from django_tenants_url.utils import get_tenants tenants = get_tenants () print ( tenants ) [ { \"id\" : 1 , \"tenant_name\" : \"Public\" , \"tenant_uuid\" : \"a66b19e4-3985-42a1-87e1-338707c4a203\" } ] Use the UUID within the headers \u00b6 Using the uuid a66b19e4-3985-42a1-87e1-338707c4a203 we can now use the header that maps the user with the schema. curl --header \"X_REQUEST_ID: a66b19e4-3985-42a1-87e1-338707c4a203\" -v http://localhost:8000/my-view","title":"Example"},{"location":"example/#example","text":"Here follows an example in how to use django-tenants-url .","title":"Example"},{"location":"example/#table-of-contents","text":"Example Table of Contents Initial Notes Install package Settings Create Tenant django app Create and run migrations Update settings Start the server Get a Tenant UUID Use the UUID within the headers","title":"Table of Contents"},{"location":"example/#initial-notes","text":"This is a very basic example how to see the UUID of a tenant and use it in the headers. For more robust and secure approach we also provide views , serializers , utils and some permissions and handlers that can be used accordingly.","title":"Initial Notes"},{"location":"example/#install-package","text":"pip install django-tenants-url","title":"Install package"},{"location":"example/#settings","text":"After installing django-tenants-url , add it into the settings. INSTALLED_APPS = [ ... 'django_tenants' , 'django_tenants_url' , ... ]","title":"Settings"},{"location":"example/#create-tenant-django-app","text":"Let's create a tenant custom app and add it into the settings. Create the app django-admin startapp tenant Add the app to the INSTALLED_APPS . python INSTALLED_APPS = [ ... 'django_tenants', 'django_tenants_url', 'tenant', ... ] More settings will be needed but we will back later on to update the settings.","title":"Create Tenant django app"},{"location":"example/#create-the-models","text":"Inside the newly created tenant in the models.py . from django_tenants_url.models import TenantMixin , DomainMixin , TenantUserMixin class Client ( TenantMixin ): pass class Domain ( DomainMixin ): pass class TenantUser ( TenantUserMixin ): pass","title":"Create the models"},{"location":"example/#create-and-run-migrations","text":"Create migrations. python manage.py makemigrations Run migrations. python manage.py migrate_schemas","title":"Create and run migrations"},{"location":"example/#update-settings","text":"With the models created we can now update the settings.py . Add extra needed settings. INSTALLED_APPS = [ ... ] TENANT_MODEL = 'tenant.Client' # needed from django-tenants TENANT_DOMAIN_MODEL = 'tenant.Domain' # needed from django-tenants # DTU_TENANT_USER_MODEL DTU_TENANT_USER_MODEL = 'tenant.TenantUser' # unique to django-tenants-url Update the MIDDLEWARE . MIDDLEWARE = [ 'django_tenants_url.middleware.RequestUUIDTenantMiddleware' , 'django.middleware.security.SecurityMiddleware' , ... ]","title":"Update settings"},{"location":"example/#start-the-server","text":"Once the first request hits the server, it should create the public tenant and public domain.","title":"Start the server"},{"location":"example/#get-a-tenant-uuid","text":"django-tenants-url provides out-of-the-box views to help you with all of the process as well as some functions that can be used to get some of the information like the UUID needed to be used in the header of a request and map to user schema. from django_tenants_url.utils import get_tenants tenants = get_tenants () print ( tenants ) [ { \"id\" : 1 , \"tenant_name\" : \"Public\" , \"tenant_uuid\" : \"a66b19e4-3985-42a1-87e1-338707c4a203\" } ]","title":"Get a Tenant UUID"},{"location":"example/#use-the-uuid-within-the-headers","text":"Using the uuid a66b19e4-3985-42a1-87e1-338707c4a203 we can now use the header that maps the user with the schema. curl --header \"X_REQUEST_ID: a66b19e4-3985-42a1-87e1-338707c4a203\" -v http://localhost:8000/my-view","title":"Use the UUID within the headers"},{"location":"handlers/","text":"Handlers \u00b6 djang-tenants-url offers some handlers that facilitates the creation or update or creation of new domain, tenants and tenant users Table of Contents \u00b6 Handlers Table of Contents handle_tenant handle_domain handle_tenant_user handle_tenant \u00b6 Creates a tenant and a schema for the same tenant. E.g.: from django_tenants_url.handlers import handle_tenant tenant = handle_tenant ( domain_url = 'myexample.com' , tenant_name = 'mytenant' , schema_name = 'myschema' ) handle_domain \u00b6 Creates a domain for a given tenant. E.g.: from django_tenants_url.handlers import handle_domain , handle_tenant tenant = handle_tenant ( domain_url = 'myexample.com' , tenant_name = 'mytenant' , schema_name = 'myschema' ) domain = handle_domain ( domain_url = 'myexample.com' , tenant = tenant , is_primary = True ) handle_tenant_user \u00b6 Creates a tenant user relation. E.g.: from django_tenants_url.handlers import handle_tenant , handle_tenant_user from django.contrib.auth import get_user_model user = get_user_model () . objects . get ( email = 'foobar@example.com' ) tenant = handle_tenant ( domain_url = 'myexample.com' , tenant_name = 'mytenant' , schema_name = 'myschema' ) # if is_active=True, that only facilitates which tenant is currently active # for the user. This can help filter schemas on logins, for example. tenant_user = handle_tenant_user ( tenant = tenant , user = user , is_active = True )","title":"Handlers"},{"location":"handlers/#handlers","text":"djang-tenants-url offers some handlers that facilitates the creation or update or creation of new domain, tenants and tenant users","title":"Handlers"},{"location":"handlers/#table-of-contents","text":"Handlers Table of Contents handle_tenant handle_domain handle_tenant_user","title":"Table of Contents"},{"location":"handlers/#handle_tenant","text":"Creates a tenant and a schema for the same tenant. E.g.: from django_tenants_url.handlers import handle_tenant tenant = handle_tenant ( domain_url = 'myexample.com' , tenant_name = 'mytenant' , schema_name = 'myschema' )","title":"handle_tenant"},{"location":"handlers/#handle_domain","text":"Creates a domain for a given tenant. E.g.: from django_tenants_url.handlers import handle_domain , handle_tenant tenant = handle_tenant ( domain_url = 'myexample.com' , tenant_name = 'mytenant' , schema_name = 'myschema' ) domain = handle_domain ( domain_url = 'myexample.com' , tenant = tenant , is_primary = True )","title":"handle_domain"},{"location":"handlers/#handle_tenant_user","text":"Creates a tenant user relation. E.g.: from django_tenants_url.handlers import handle_tenant , handle_tenant_user from django.contrib.auth import get_user_model user = get_user_model () . objects . get ( email = 'foobar@example.com' ) tenant = handle_tenant ( domain_url = 'myexample.com' , tenant_name = 'mytenant' , schema_name = 'myschema' ) # if is_active=True, that only facilitates which tenant is currently active # for the user. This can help filter schemas on logins, for example. tenant_user = handle_tenant_user ( tenant = tenant , user = user , is_active = True )","title":"handle_tenant_user"},{"location":"middleware/","text":"Middleware \u00b6 The core of django-tenants-url is the custom MIDDLEWARE . Table of Contents \u00b6 Middleware Table of Contents Installation Installation \u00b6 Add the TENANT_USER_MODEL to settings.py . # settings.py ... DTU_TENANT_USER_MODEL = 'myapp.TenantUser' ... Update the MIDDLEWARE to have the new RequestUUIDTenantMiddleware . Preferentially at the very top. # settings.py ... MIDDLEWARE = [ 'django_tenants_url.middleware.RequestUUIDTenantMiddleware' , 'django.middleware.security.SecurityMiddleware' , ... ] ...","title":"Middleware"},{"location":"middleware/#middleware","text":"The core of django-tenants-url is the custom MIDDLEWARE .","title":"Middleware"},{"location":"middleware/#table-of-contents","text":"Middleware Table of Contents Installation","title":"Table of Contents"},{"location":"middleware/#installation","text":"Add the TENANT_USER_MODEL to settings.py . # settings.py ... DTU_TENANT_USER_MODEL = 'myapp.TenantUser' ... Update the MIDDLEWARE to have the new RequestUUIDTenantMiddleware . Preferentially at the very top. # settings.py ... MIDDLEWARE = [ 'django_tenants_url.middleware.RequestUUIDTenantMiddleware' , 'django.middleware.security.SecurityMiddleware' , ... ] ...","title":"Installation"},{"location":"models/","text":"Models \u00b6 django-tenants offers a set of models that can and should be use to facilitate the integration of multi-tenancy. django-tenants-url wraps those same models and adds some extra flavours to make sure it serves the purpose of a unified url for all tenants. Table of Contents \u00b6 Models Table of Contents TenantMixin DomainMixin TenantUserMixin Handlers TenantMixin \u00b6 TenantMixin is where the tenant information is stored. from django_tenants_url.models import TenantMixin class Tenant ( TenantMixin ): # Customize, override or leave it be pass DomainMixin \u00b6 DomainMixin is where the domain of a tenant is stored. from django_tenants_url.models import DomainMixin class Domain ( DomainMixin ): # Customize, override or leave it be pass TenantUserMixin \u00b6 TenantUserMixin is where the mapping between a tenant and a user of the system is stored. This is one of the main differences that diverges from django-tenants and what allows the integration of a unified URL for all users and tenants in the system. from django_tenants_url.models import TenantUserMixin class TenantUser ( TenantUserMixin ): # Customize, override or leave it be pass Handlers \u00b6 To help with the process of the creation of a domain and tenant we can also use handle_domain and handle_tenant . More on this here .","title":"Models"},{"location":"models/#models","text":"django-tenants offers a set of models that can and should be use to facilitate the integration of multi-tenancy. django-tenants-url wraps those same models and adds some extra flavours to make sure it serves the purpose of a unified url for all tenants.","title":"Models"},{"location":"models/#table-of-contents","text":"Models Table of Contents TenantMixin DomainMixin TenantUserMixin Handlers","title":"Table of Contents"},{"location":"models/#tenantmixin","text":"TenantMixin is where the tenant information is stored. from django_tenants_url.models import TenantMixin class Tenant ( TenantMixin ): # Customize, override or leave it be pass","title":"TenantMixin"},{"location":"models/#domainmixin","text":"DomainMixin is where the domain of a tenant is stored. from django_tenants_url.models import DomainMixin class Domain ( DomainMixin ): # Customize, override or leave it be pass","title":"DomainMixin"},{"location":"models/#tenantusermixin","text":"TenantUserMixin is where the mapping between a tenant and a user of the system is stored. This is one of the main differences that diverges from django-tenants and what allows the integration of a unified URL for all users and tenants in the system. from django_tenants_url.models import TenantUserMixin class TenantUser ( TenantUserMixin ): # Customize, override or leave it be pass","title":"TenantUserMixin"},{"location":"models/#handlers","text":"To help with the process of the creation of a domain and tenant we can also use handle_domain and handle_tenant . More on this here .","title":"Handlers"},{"location":"permissions/","text":"Permissions \u00b6 Handling access permissions with django-tenants-url is like doing using Django Rest Framework. Django Tenants URL splits the middleware only used to map the UUID of a tenant and route the connection and the permissions to access a given tenant by validating the UUID of the header. Table of Contents \u00b6 Permissions Table of Contents BaseTenantPermission IsTenantAllowedOrPublic BaseTenantPermission \u00b6 The base used for the permissions of the tenants. IsTenantAllowedOrPublic \u00b6 Checks if the user is allowed to access a specific tenant. If no header is passed, it will return True defaulting to public. When a header (default X_REQUEST_ID ) is passed then checks if the user has permission to access it, in other words, checks if there is a tenant user ( TenantUserMixin ) associated. Example: # views.py from django_tenants_url.permissions import IsTenantAllowedOrPublic from rest_framwork.generics import ListAPIView from rest_framework.permissions import IsAuthenticated from myapp.models import Customer class MyView ( ListAPIView ): permission_classes = [ IsAuthenticated , IsTenantAllowedOrPublic ] def get ( self , request , * args , ** kwargs ): return Customer . objects . all ()","title":"Permissions"},{"location":"permissions/#permissions","text":"Handling access permissions with django-tenants-url is like doing using Django Rest Framework. Django Tenants URL splits the middleware only used to map the UUID of a tenant and route the connection and the permissions to access a given tenant by validating the UUID of the header.","title":"Permissions"},{"location":"permissions/#table-of-contents","text":"Permissions Table of Contents BaseTenantPermission IsTenantAllowedOrPublic","title":"Table of Contents"},{"location":"permissions/#basetenantpermission","text":"The base used for the permissions of the tenants.","title":"BaseTenantPermission"},{"location":"permissions/#istenantallowedorpublic","text":"Checks if the user is allowed to access a specific tenant. If no header is passed, it will return True defaulting to public. When a header (default X_REQUEST_ID ) is passed then checks if the user has permission to access it, in other words, checks if there is a tenant user ( TenantUserMixin ) associated. Example: # views.py from django_tenants_url.permissions import IsTenantAllowedOrPublic from rest_framwork.generics import ListAPIView from rest_framework.permissions import IsAuthenticated from myapp.models import Customer class MyView ( ListAPIView ): permission_classes = [ IsAuthenticated , IsTenantAllowedOrPublic ] def get ( self , request , * args , ** kwargs ): return Customer . objects . all ()","title":"IsTenantAllowedOrPublic"},{"location":"releases/","text":"Releases \u00b6 1.0.1 \u00b6 Fix code smells on serializers and permissions. 1.0.0 \u00b6 Release of django-tenants-url . Middleware Models Handlers Permissions Views URLs Utils","title":"Releases"},{"location":"releases/#releases","text":"","title":"Releases"},{"location":"releases/#101","text":"Fix code smells on serializers and permissions.","title":"1.0.1"},{"location":"releases/#100","text":"Release of django-tenants-url . Middleware Models Handlers Permissions Views URLs Utils","title":"1.0.0"},{"location":"serializers/","text":"Serializers \u00b6 There are built-in serializers offered by the package. Table of Contents \u00b6 Serializers Table of Contents Notes TenantSerializer TenantListSerializer CreateTenantSerializer TenantUserSerializer Notes \u00b6 The following serializers are used with the views but can also be used with any other custom view. TenantSerializer \u00b6 Basic Tenant Serializer Renders: tenant_name - String tenant_uuid - String Example: from django_tenants_url.serializers import TenantSerializer from rest_framework.views import APIView from django_tenants.utils import get_tenant_model class MyView ( APIView ): serializer_class = TenantSerializer def post ( self , request , * args , ** kwargs ): data = request . data or {} tenant_name = data . get ( \"tenant_name\" ) if tenant_name is None : raise ParseError ( detail = \"tenant_name missing.\" ) try : tenant = get_tenant_model () . objects . get ( tenant_name__iexact = tenant_name ) except get_tenant_model () . DoesNotExist : raise ParseError ( detail = f \" { tenant_name } does not exist.\" ) serializer = self . serializer_class ( tenant , many = False ) return Response ( serializer . data , status = status . HTTP_200_OK ) TenantListSerializer \u00b6 Model serializer retrieving the information of the tenants. Renders: id - Integer tenant_name - String tenant_uuid - String Example: from django_tenants_url.serializers import TenantListSerializer from rest_framework.generics import ListAPIView from django_tenants.utils import get_tenant_model class MyView ( ListAPIView ): serializer_class = TenantListSerializer queryset = get_tenant_model () . objects . all () CreateTenantSerializer \u00b6 For the creation of a tenant in the system. Params : tenant_name - String (required). schema_name - String (required). domain_url - String (required). on_trial - Boolean (optional, default=False ). paid_until - DateTime (optional, raises exception if on_trial=True and paid_until=None ). is_primary - Boolean (optional, default=True ). Implementation example . TenantUserSerializer \u00b6 For the creation of a tenant user association. Params : user_id - Integer (required). tenant_id - Integer (required). is_active - Boolean (required). Implementation example .","title":"Serializers"},{"location":"serializers/#serializers","text":"There are built-in serializers offered by the package.","title":"Serializers"},{"location":"serializers/#table-of-contents","text":"Serializers Table of Contents Notes TenantSerializer TenantListSerializer CreateTenantSerializer TenantUserSerializer","title":"Table of Contents"},{"location":"serializers/#notes","text":"The following serializers are used with the views but can also be used with any other custom view.","title":"Notes"},{"location":"serializers/#tenantserializer","text":"Basic Tenant Serializer Renders: tenant_name - String tenant_uuid - String Example: from django_tenants_url.serializers import TenantSerializer from rest_framework.views import APIView from django_tenants.utils import get_tenant_model class MyView ( APIView ): serializer_class = TenantSerializer def post ( self , request , * args , ** kwargs ): data = request . data or {} tenant_name = data . get ( \"tenant_name\" ) if tenant_name is None : raise ParseError ( detail = \"tenant_name missing.\" ) try : tenant = get_tenant_model () . objects . get ( tenant_name__iexact = tenant_name ) except get_tenant_model () . DoesNotExist : raise ParseError ( detail = f \" { tenant_name } does not exist.\" ) serializer = self . serializer_class ( tenant , many = False ) return Response ( serializer . data , status = status . HTTP_200_OK )","title":"TenantSerializer"},{"location":"serializers/#tenantlistserializer","text":"Model serializer retrieving the information of the tenants. Renders: id - Integer tenant_name - String tenant_uuid - String Example: from django_tenants_url.serializers import TenantListSerializer from rest_framework.generics import ListAPIView from django_tenants.utils import get_tenant_model class MyView ( ListAPIView ): serializer_class = TenantListSerializer queryset = get_tenant_model () . objects . all ()","title":"TenantListSerializer"},{"location":"serializers/#createtenantserializer","text":"For the creation of a tenant in the system. Params : tenant_name - String (required). schema_name - String (required). domain_url - String (required). on_trial - Boolean (optional, default=False ). paid_until - DateTime (optional, raises exception if on_trial=True and paid_until=None ). is_primary - Boolean (optional, default=True ). Implementation example .","title":"CreateTenantSerializer"},{"location":"serializers/#tenantuserserializer","text":"For the creation of a tenant user association. Params : user_id - Integer (required). tenant_id - Integer (required). is_active - Boolean (required). Implementation example .","title":"TenantUserSerializer"},{"location":"settings/","text":"Settings \u00b6 Default settings are provided with django-tenants-url . Table of Contents \u00b6 Settings Table of Contents Defaults HEADER_NAME TENANT_USER_MODEL Example Defaults \u00b6 # settings.py ... DTU_TENANT_NAME = \"Public\" DTU_TENANT_SCHEMA = \"public\" DTU_DOMAIN_NAME = \"localhost\" DTU_PAID_UNTIL = \"2100-12-31\" DTU_ON_TRIAL = False DTU_HEADER_NAME = \"HTTP_X_REQUEST_ID\" DTU_AUTO_CREATE_SCHEMA = True DTU_AUTO_DROP_SCHEMA = False DTU_TENANT_USER_MODEL = None DTU_TENANT_NAME - Default tenant name for the public schema. DTU_TENANT_SCHEMA - Default schema name for the public. DTU_DOMAIN_NAME - Public schema defaults to localhost (production server, for example). DTU_PAID_UNTIL - Default paid_until date. The package can be used for subscription models. DTU_ON_TRIAL - Defaults to false . With paid_until this flag can be activated for subscription models. DTU_HEADER_NAME - Name of the header to be sent with the calls and route to the schema. DTU_AUTO_CREATE_SCHEMA - When disabled, a tenant schema is not created on save() . DTU_AUTO_DROP_SCHEMA - If disabled, a tenant when removed the schema is not delated on delete() . DTU_TENANT_USER_MODEL - Required field pointing to the model mapping a tenant with a user. HEADER_NAME \u00b6 Probably the one of the most important configurations. The HEADER_NAME is what will be used to be read/sent from the requests hitting the back-end server and map the current user with a schema. This field can be overritten to any value of choice but be careful when changing . TENANT_USER_MODEL \u00b6 This field is crucial to be updated in the settings ( see installation instructions ). The model will facilitate the mapping between a tenant and a user. The middleware doesn't lookup at this model but it's specially useful if the permissions are used. The middleware looks at the Tenant model . Example \u00b6 When updating the settings, specially HEADER_NAME that can be done via settings.py . # settings.py ... DTU_HEADER_NAME = ` HTTP_X_UNIQUE_ID \" curl --header \"X_UNIQUE_ID: <UNIQUE_UUID>\" -v http://localhost:8000/my-view","title":"Settings"},{"location":"settings/#settings","text":"Default settings are provided with django-tenants-url .","title":"Settings"},{"location":"settings/#table-of-contents","text":"Settings Table of Contents Defaults HEADER_NAME TENANT_USER_MODEL Example","title":"Table of Contents"},{"location":"settings/#defaults","text":"# settings.py ... DTU_TENANT_NAME = \"Public\" DTU_TENANT_SCHEMA = \"public\" DTU_DOMAIN_NAME = \"localhost\" DTU_PAID_UNTIL = \"2100-12-31\" DTU_ON_TRIAL = False DTU_HEADER_NAME = \"HTTP_X_REQUEST_ID\" DTU_AUTO_CREATE_SCHEMA = True DTU_AUTO_DROP_SCHEMA = False DTU_TENANT_USER_MODEL = None DTU_TENANT_NAME - Default tenant name for the public schema. DTU_TENANT_SCHEMA - Default schema name for the public. DTU_DOMAIN_NAME - Public schema defaults to localhost (production server, for example). DTU_PAID_UNTIL - Default paid_until date. The package can be used for subscription models. DTU_ON_TRIAL - Defaults to false . With paid_until this flag can be activated for subscription models. DTU_HEADER_NAME - Name of the header to be sent with the calls and route to the schema. DTU_AUTO_CREATE_SCHEMA - When disabled, a tenant schema is not created on save() . DTU_AUTO_DROP_SCHEMA - If disabled, a tenant when removed the schema is not delated on delete() . DTU_TENANT_USER_MODEL - Required field pointing to the model mapping a tenant with a user.","title":"Defaults"},{"location":"settings/#header_name","text":"Probably the one of the most important configurations. The HEADER_NAME is what will be used to be read/sent from the requests hitting the back-end server and map the current user with a schema. This field can be overritten to any value of choice but be careful when changing .","title":"HEADER_NAME"},{"location":"settings/#tenant_user_model","text":"This field is crucial to be updated in the settings ( see installation instructions ). The model will facilitate the mapping between a tenant and a user. The middleware doesn't lookup at this model but it's specially useful if the permissions are used. The middleware looks at the Tenant model .","title":"TENANT_USER_MODEL"},{"location":"settings/#example","text":"When updating the settings, specially HEADER_NAME that can be done via settings.py . # settings.py ... DTU_HEADER_NAME = ` HTTP_X_UNIQUE_ID \" curl --header \"X_UNIQUE_ID: <UNIQUE_UUID>\" -v http://localhost:8000/my-view","title":"Example"},{"location":"urls/","text":"URLS \u00b6 Table of Contents \u00b6 URLS Table of Contents How to import Available URLS How to import \u00b6 # urls.py from django.urls import include ... urlpatterns = [ ... path ( 'tenants' , include ( 'django_tenants_url.urls' )) ... ] Available URLS \u00b6 urlpatterns = [ path ( \"info\" , TenantAPIView . as_view (), name = \"tenant-info\" ), path ( \"tenant\" , CreateTenantAPIView . as_view (), name = \"create-tenant\" ), path ( \"tenant/delete/<int:pk>\" , DestroyTenantAPIView . as_view (), name = \"delete-tenant\" ), path ( \"tenants\" , TenantListAPIView . as_view (), name = \"tenant-list\" ), path ( \"tenant/user\" , TenantUserAPIView . as_view (), name = \"create-tenant-user\" ), path ( \"tenant/user/<int:user_id>/<int:tenant_id>\" , DestroyTenantUserAPIView . as_view (), name = \"delete-tenant-user\" , ), path ( \"tenant/user/<int:tenant_id>/set-active\" , SetActiveTenantUserAPIView . as_view (), name = \"set-active-tenant\" , ), ]","title":"URLs"},{"location":"urls/#urls","text":"","title":"URLS"},{"location":"urls/#table-of-contents","text":"URLS Table of Contents How to import Available URLS","title":"Table of Contents"},{"location":"urls/#how-to-import","text":"# urls.py from django.urls import include ... urlpatterns = [ ... path ( 'tenants' , include ( 'django_tenants_url.urls' )) ... ]","title":"How to import"},{"location":"urls/#available-urls","text":"urlpatterns = [ path ( \"info\" , TenantAPIView . as_view (), name = \"tenant-info\" ), path ( \"tenant\" , CreateTenantAPIView . as_view (), name = \"create-tenant\" ), path ( \"tenant/delete/<int:pk>\" , DestroyTenantAPIView . as_view (), name = \"delete-tenant\" ), path ( \"tenants\" , TenantListAPIView . as_view (), name = \"tenant-list\" ), path ( \"tenant/user\" , TenantUserAPIView . as_view (), name = \"create-tenant-user\" ), path ( \"tenant/user/<int:user_id>/<int:tenant_id>\" , DestroyTenantUserAPIView . as_view (), name = \"delete-tenant-user\" , ), path ( \"tenant/user/<int:tenant_id>/set-active\" , SetActiveTenantUserAPIView . as_view (), name = \"set-active-tenant\" , ), ]","title":"Available URLS"},{"location":"utils/","text":"Utils \u00b6 Table of Contents \u00b6 Utils Table of Contents Functions Functions \u00b6 get_tenant_user_model() - Return the Tenant User model set in the settings DTU_TENANT_USER_MODEL . get_active_user_tenant() - Return the active tenant of a given auth.User . get_user_tenants() - Lists the tenants associated with a user. get_tenants() - Returns a list of all tenants. from django_tenants_url.utils import ( get_tenant_user_model , get_active_user_tenant , get_user_tenants , get_tenants )","title":"Utils"},{"location":"utils/#utils","text":"","title":"Utils"},{"location":"utils/#table-of-contents","text":"Utils Table of Contents Functions","title":"Table of Contents"},{"location":"utils/#functions","text":"get_tenant_user_model() - Return the Tenant User model set in the settings DTU_TENANT_USER_MODEL . get_active_user_tenant() - Return the active tenant of a given auth.User . get_user_tenants() - Lists the tenants associated with a user. get_tenants() - Returns a list of all tenants. from django_tenants_url.utils import ( get_tenant_user_model , get_active_user_tenant , get_user_tenants , get_tenants )","title":"Functions"},{"location":"views/","text":"Views \u00b6 Using multi tenancy can be complicated sometimes and the initial configurations can take some time to get around. django-tenants-url has some built-in views to help with the process but those can be replaced by any custom view. The views are built on the top of Django Rest Framework . Table of Contents \u00b6 Views Table of Contents Initial Notes Inherited Views Import Views Import URLs TenantListAPIView TenantAPIView CreateTenantAPIView DestroyTenantAPIView TenantUserAPIView DestroyTenantUserAPIView SetActiveTenantUserAPIView Initial Notes \u00b6 The views below are built-in from the django-tenants-url and those can be used directly: Per Mixin Per import Per URL The urls can also be imported and used directly. Inherited Views \u00b6 One way to use the views is by simply inheriting to be used with any system and permissions. Example: # views.py ... from django_tenants_url.views import CreateTenantAPIView ... class MyCustomView ( MyCustomAuthMixin , CreateTenantAPIView ): permission_classes = [ IsAuthenticated , MyCustomTenantPermission ] ... Import Views \u00b6 To import all the built-in views from the project, simply use the standard imports. Example.: from django_tenants_url.views import ( CreateTenantAPIView , DestroyTenantAPIView , DestroyTenantUserAPIView , SetActiveTenantUserAPIView , TenantAPIView , TenantListAPIView , TenantUserAPIView ) ... Import URLs \u00b6 The views can be directly imported into a project via normal django url imports. Example: # urls.py from django.urls import include urlpatterns = [ ... path ( 'tenants' , include ( 'django_tenants_url.urls' )), ... ] TenantListAPIView \u00b6 Lists all the tenants in the system. No params required. Method: GET . Example: import requests url = 'http://localhost:8000/api/v1/myview response = requests . get ( url ) TenantAPIView \u00b6 Returns the information of a given tenant. Method: POST . Params : tenant_name - String (required) Example: import requests url = 'http://localhost:8000/api/v1/myview params = { 'tenant_name' : 'Public' } response = requests . post ( url , params = params ) CreateTenantAPIView \u00b6 Creates a tenant and corresponding schema in the system. Method: POST . Params : tenant_name - String (required). schema_name - String (required). domain_url - String (required). Example: import requests url = 'http://localhost:8000/api/v1/myview params = { 'tenant_name' : 'My Company' , 'schema_name' : 'my_company' , 'domain_url' : 'mycompany.com' } response = requests . post ( url , params = params ) DestroyTenantAPIView \u00b6 Removes a tenant and domains associated to the tenant from the system. Method: DELETE . Params : id - Integer (URL parameter, required). Example: import requests url = 'http://localhost:8000/api/v1/myview/2 response = requests . delete ( url ) TenantUserAPIView \u00b6 Associates a system user with a system tenant and sets to active. Method: POST . Params : user_id - Integer (URL parameter, required). tenant_id - Integer (URL parameter, required). is_active - Boolean (URL parameter, required). Example: import requests url = 'http://localhost:8000/api/v1/myview params = { 'user_id' : 12 , 'tenant_id' : 25 , 'is_active' : True } response = requests . post ( url , params = params ) DestroyTenantUserAPIView \u00b6 Removes the association of a system user and a tenant. Method: DELETE . Params : user_id - Integer (URL parameter, required). tenant_id - Integer (URL parameter, required). Example: import requests url = 'http://localhost:8000/api/v1/myview/12/25 response = requests . delete ( url ) SetActiveTenantUserAPIView \u00b6 Sets the current active tenant of a request user (logged in). Method: PUT . Params : tenant_id - Integer (URL parameter, required). Example: import requests url = 'http://localhost:8000/api/v1/myview/25 response = requests . put ( url )","title":"Views"},{"location":"views/#views","text":"Using multi tenancy can be complicated sometimes and the initial configurations can take some time to get around. django-tenants-url has some built-in views to help with the process but those can be replaced by any custom view. The views are built on the top of Django Rest Framework .","title":"Views"},{"location":"views/#table-of-contents","text":"Views Table of Contents Initial Notes Inherited Views Import Views Import URLs TenantListAPIView TenantAPIView CreateTenantAPIView DestroyTenantAPIView TenantUserAPIView DestroyTenantUserAPIView SetActiveTenantUserAPIView","title":"Table of Contents"},{"location":"views/#initial-notes","text":"The views below are built-in from the django-tenants-url and those can be used directly: Per Mixin Per import Per URL The urls can also be imported and used directly.","title":"Initial Notes"},{"location":"views/#inherited-views","text":"One way to use the views is by simply inheriting to be used with any system and permissions. Example: # views.py ... from django_tenants_url.views import CreateTenantAPIView ... class MyCustomView ( MyCustomAuthMixin , CreateTenantAPIView ): permission_classes = [ IsAuthenticated , MyCustomTenantPermission ] ...","title":"Inherited Views"},{"location":"views/#import-views","text":"To import all the built-in views from the project, simply use the standard imports. Example.: from django_tenants_url.views import ( CreateTenantAPIView , DestroyTenantAPIView , DestroyTenantUserAPIView , SetActiveTenantUserAPIView , TenantAPIView , TenantListAPIView , TenantUserAPIView ) ...","title":"Import Views"},{"location":"views/#import-urls","text":"The views can be directly imported into a project via normal django url imports. Example: # urls.py from django.urls import include urlpatterns = [ ... path ( 'tenants' , include ( 'django_tenants_url.urls' )), ... ]","title":"Import URLs"},{"location":"views/#tenantlistapiview","text":"Lists all the tenants in the system. No params required. Method: GET . Example: import requests url = 'http://localhost:8000/api/v1/myview response = requests . get ( url )","title":"TenantListAPIView"},{"location":"views/#tenantapiview","text":"Returns the information of a given tenant. Method: POST . Params : tenant_name - String (required) Example: import requests url = 'http://localhost:8000/api/v1/myview params = { 'tenant_name' : 'Public' } response = requests . post ( url , params = params )","title":"TenantAPIView"},{"location":"views/#createtenantapiview","text":"Creates a tenant and corresponding schema in the system. Method: POST . Params : tenant_name - String (required). schema_name - String (required). domain_url - String (required). Example: import requests url = 'http://localhost:8000/api/v1/myview params = { 'tenant_name' : 'My Company' , 'schema_name' : 'my_company' , 'domain_url' : 'mycompany.com' } response = requests . post ( url , params = params )","title":"CreateTenantAPIView"},{"location":"views/#destroytenantapiview","text":"Removes a tenant and domains associated to the tenant from the system. Method: DELETE . Params : id - Integer (URL parameter, required). Example: import requests url = 'http://localhost:8000/api/v1/myview/2 response = requests . delete ( url )","title":"DestroyTenantAPIView"},{"location":"views/#tenantuserapiview","text":"Associates a system user with a system tenant and sets to active. Method: POST . Params : user_id - Integer (URL parameter, required). tenant_id - Integer (URL parameter, required). is_active - Boolean (URL parameter, required). Example: import requests url = 'http://localhost:8000/api/v1/myview params = { 'user_id' : 12 , 'tenant_id' : 25 , 'is_active' : True } response = requests . post ( url , params = params )","title":"TenantUserAPIView"},{"location":"views/#destroytenantuserapiview","text":"Removes the association of a system user and a tenant. Method: DELETE . Params : user_id - Integer (URL parameter, required). tenant_id - Integer (URL parameter, required). Example: import requests url = 'http://localhost:8000/api/v1/myview/12/25 response = requests . delete ( url )","title":"DestroyTenantUserAPIView"},{"location":"views/#setactivetenantuserapiview","text":"Sets the current active tenant of a request user (logged in). Method: PUT . Params : tenant_id - Integer (URL parameter, required). Example: import requests url = 'http://localhost:8000/api/v1/myview/25 response = requests . put ( url )","title":"SetActiveTenantUserAPIView"}]}